// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
  shadowDatabaseUrl    = env("SHADOW_DATA_BASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user      User     @relation(fields: [userId], references: [id])
  Company   Company? @relation(fields: [companyId], references: [id])
  companyId String?

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String?  @map("user_id")
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id])
  Company      Company? @relation(fields: [companyId], references: [id])
  companyId    String?

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id                    String               @id @default(cuid())
  username              String?
  email                 String?              @unique
  password              String?
  avatar                String?
  emailVerified         DateTime?            @map("email_verified")
  created_at            DateTime             @default(now())
  accounts              Account[]
  sessions              Session[]
  area                  String?
  level                 String?
  userType              String?
  bio                   String?              @db.Text
  Skills                UsersSkills[]
  Country               Country?             @relation(fields: [countryId], references: [id])
  countryId             String?
  City                  City?                @relation(fields: [cityId], references: [id])
  cityId                String?
  LocationInteresting   LocationInteresting? @relation(fields: [locationInterestingId], references: [id])
  locationInterestingId String?
  Link                  Link[]

  @@map("users")
}

model Company {
  id            String    @id @default(cuid())
  name          String
  Country       Country?  @relation(fields: [countryId], references: [id])
  countryId     String?
  City          City?     @relation(fields: [cityId], references: [id])
  cityId        String?
  Jobs          Job[]
  about         String?   @db.Text
  userType      String?
  accounts      Account[]
  sessions      Session[]
  created_at    DateTime  @default(now())
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  avatar        String?
  password      String?
}

model Job {
  id         String       @id @default(cuid())
  created_at DateTime     @default(now())
  areaId     String?
  Company    Company?     @relation(fields: [companyId], references: [id])
  companyId  String?
  about      String?      @db.Text
  Skills     JobsSkills[]
  area       Area?        @relation(fields: [areaId], references: [id])
  period     Period?      @relation(fields: [periodId], references: [id])
  periodId   String?
  level      level?       @relation(fields: [levelId], references: [id])
  levelId    String?
  Country    Country?     @relation(fields: [countryId], references: [id])
  countryId  String?
  City       City?        @relation(fields: [cityId], references: [id])
  cityId     String?
  avatar     String?
}

model UsersSkills {
  skill       Skill    @relation(fields: [fk_id_skill], references: [id])
  fk_id_skill String
  user        User     @relation(fields: [fk_id_user], references: [id])
  fk_id_user  String
  created_at  DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@id([fk_id_skill, fk_id_user])
  @@map("usersSkills")
}

model JobsSkills {
  skill       Skill    @relation(fields: [fk_id_skill], references: [id])
  fk_id_skill String
  job         Job      @relation(fields: [fk_id_job], references: [id])
  fk_id_job   String
  created_at  DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@id([fk_id_skill, fk_id_job])
  @@map("jobSkills")
}

model Skill {
  id    String        @id @default(cuid())
  text  String        @unique
  Users UsersSkills[]
  Jobs  JobsSkills[]
}

model Country {
  id      String    @id @default(cuid())
  name    String    @unique
  user    User[]
  Company Company[]
  job     Job[]
}

model City {
  id      String    @id @default(cuid())
  name    String    @unique
  user    User[]
  Company Company[]
  job     Job[]
}

model LocationInteresting {
  id   String @id @default(cuid())
  name String @unique
  user User[]
}

model Link {
  id         String @id @default(cuid())
  name       String @unique
  user       User   @relation(fields: [fk_id_user], references: [id])
  fk_id_user String
}

model Area {
  id   String @id @default(cuid())
  name String @unique
  jobs Job[]
}

model Period {
  id   String @id @default(cuid())
  name String @unique
  jobs Job[]
}

model level {
  id   String @id @default(cuid())
  name String @unique
  jobs Job[]
}
