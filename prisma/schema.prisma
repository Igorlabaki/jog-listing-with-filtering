// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
  shadowDatabaseUrl    = env("SHADOW_DATA_BASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id            String        @id @default(cuid())
  username      String?
  email         String?       @unique
  password      String?
  avatar        String?
  emailVerified DateTime?     @map("email_verified")
  created_at    DateTime      @default(now())
  accounts      Account[]
  sessions      Session[]
  area          String?
  level         String?
  userType      String?
  bio           String?       @db.Text
  Skills        UsersSkills[]

  @@map("users")
}

model Job {
  id         String   @id @default(cuid())
  brand      String
  company    String
  job_title  String
  new        Boolean
  created_at DateTime @default(now())
  skillId    String?
  areaId     String?
}

model UsersSkills {
  id          String   @id @default(uuid())
  skill       Skill    @relation(fields: [fk_id_skill], references: [id])
  fk_id_skill String
  user        User     @relation(fields: [fk_id_user], references: [id])
  fk_id_user  String
  created_at  DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("userBooks")
}

model Skill {
  id          String        @id @default(cuid())
  text        String        @unique
  UsersSkills UsersSkills[]
}
